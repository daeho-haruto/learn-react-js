{"ast":null,"code":"/**\n * @fileOverview\n * @author Graeme Yeates - github.com/megawac\n */\n'use strict';\n\nvar Canvas = require('canvas');\n\nvar Image = Canvas.Image || window.Image;\n/**\n * If a message was compressed as a PNG image (a compression hack since\n * gzipping over WebSockets * is not supported yet), this function places the\n * \"image\" in a canvas element then decodes the * \"image\" as a Base64 string.\n *\n * @private\n * @param data - object containing the PNG data.\n * @param callback - function with params:\n *   * data - the uncompressed data\n */\n\nfunction decompressPng(data, callback) {\n  // Uncompresses the data before sending it through (use image/canvas to do so).\n  var image = new Image(); // When the image loads, extracts the raw data (JSON message).\n\n  image.onload = function () {\n    // Creates a local canvas to draw on.\n    var canvas = new Canvas();\n    var context = canvas.getContext('2d'); // Sets width and height.\n\n    canvas.width = image.width;\n    canvas.height = image.height; // Prevents anti-aliasing and loosing data\n\n    context.imageSmoothingEnabled = false;\n    context.webkitImageSmoothingEnabled = false;\n    context.mozImageSmoothingEnabled = false; // Puts the data into the image.\n\n    context.drawImage(image, 0, 0); // Grabs the raw, uncompressed data.\n\n    var imageData = context.getImageData(0, 0, image.width, image.height).data; // Constructs the JSON.\n\n    var jsonData = '';\n\n    for (var i = 0; i < imageData.length; i += 4) {\n      // RGB\n      jsonData += String.fromCharCode(imageData[i], imageData[i + 1], imageData[i + 2]);\n    }\n\n    callback(JSON.parse(jsonData));\n  }; // Sends the image data to load.\n\n\n  image.src = 'data:image/png;base64,' + data;\n}\n\nmodule.exports = decompressPng;","map":{"version":3,"names":["Canvas","require","Image","window","decompressPng","data","callback","image","onload","canvas","context","getContext","width","height","imageSmoothingEnabled","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","drawImage","imageData","getImageData","jsonData","i","length","String","fromCharCode","JSON","parse","src","module","exports"],"sources":["/home/daeho/Documents/react/study/node_modules/roslib/src/util/shim/decompressPng.js"],"sourcesContent":["/**\n * @fileOverview\n * @author Graeme Yeates - github.com/megawac\n */\n\n'use strict';\n\nvar Canvas = require('canvas');\nvar Image = Canvas.Image || window.Image;\n\n/**\n * If a message was compressed as a PNG image (a compression hack since\n * gzipping over WebSockets * is not supported yet), this function places the\n * \"image\" in a canvas element then decodes the * \"image\" as a Base64 string.\n *\n * @private\n * @param data - object containing the PNG data.\n * @param callback - function with params:\n *   * data - the uncompressed data\n */\nfunction decompressPng(data, callback) {\n  // Uncompresses the data before sending it through (use image/canvas to do so).\n  var image = new Image();\n  // When the image loads, extracts the raw data (JSON message).\n  image.onload = function() {\n    // Creates a local canvas to draw on.\n    var canvas = new Canvas();\n    var context = canvas.getContext('2d');\n\n    // Sets width and height.\n    canvas.width = image.width;\n    canvas.height = image.height;\n\n    // Prevents anti-aliasing and loosing data\n    context.imageSmoothingEnabled = false;\n    context.webkitImageSmoothingEnabled = false;\n    context.mozImageSmoothingEnabled = false;\n\n    // Puts the data into the image.\n    context.drawImage(image, 0, 0);\n    // Grabs the raw, uncompressed data.\n    var imageData = context.getImageData(0, 0, image.width, image.height).data;\n\n    // Constructs the JSON.\n    var jsonData = '';\n    for (var i = 0; i < imageData.length; i += 4) {\n      // RGB\n      jsonData += String.fromCharCode(imageData[i], imageData[i + 1], imageData[i + 2]);\n    }\n    callback(JSON.parse(jsonData));\n  };\n  // Sends the image data to load.\n  image.src = 'data:image/png;base64,' + data;\n}\n\nmodule.exports = decompressPng;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,KAAK,GAAGF,MAAM,CAACE,KAAP,IAAgBC,MAAM,CAACD,KAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,aAAT,CAAuBC,IAAvB,EAA6BC,QAA7B,EAAuC;EACrC;EACA,IAAIC,KAAK,GAAG,IAAIL,KAAJ,EAAZ,CAFqC,CAGrC;;EACAK,KAAK,CAACC,MAAN,GAAe,YAAW;IACxB;IACA,IAAIC,MAAM,GAAG,IAAIT,MAAJ,EAAb;IACA,IAAIU,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAd,CAHwB,CAKxB;;IACAF,MAAM,CAACG,KAAP,GAAeL,KAAK,CAACK,KAArB;IACAH,MAAM,CAACI,MAAP,GAAgBN,KAAK,CAACM,MAAtB,CAPwB,CASxB;;IACAH,OAAO,CAACI,qBAAR,GAAgC,KAAhC;IACAJ,OAAO,CAACK,2BAAR,GAAsC,KAAtC;IACAL,OAAO,CAACM,wBAAR,GAAmC,KAAnC,CAZwB,CAcxB;;IACAN,OAAO,CAACO,SAAR,CAAkBV,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,EAfwB,CAgBxB;;IACA,IAAIW,SAAS,GAAGR,OAAO,CAACS,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2BZ,KAAK,CAACK,KAAjC,EAAwCL,KAAK,CAACM,MAA9C,EAAsDR,IAAtE,CAjBwB,CAmBxB;;IACA,IAAIe,QAAQ,GAAG,EAAf;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;MAC5C;MACAD,QAAQ,IAAIG,MAAM,CAACC,YAAP,CAAoBN,SAAS,CAACG,CAAD,CAA7B,EAAkCH,SAAS,CAACG,CAAC,GAAG,CAAL,CAA3C,EAAoDH,SAAS,CAACG,CAAC,GAAG,CAAL,CAA7D,CAAZ;IACD;;IACDf,QAAQ,CAACmB,IAAI,CAACC,KAAL,CAAWN,QAAX,CAAD,CAAR;EACD,CA1BD,CAJqC,CA+BrC;;;EACAb,KAAK,CAACoB,GAAN,GAAY,2BAA2BtB,IAAvC;AACD;;AAEDuB,MAAM,CAACC,OAAP,GAAiBzB,aAAjB"},"metadata":{},"sourceType":"script"}