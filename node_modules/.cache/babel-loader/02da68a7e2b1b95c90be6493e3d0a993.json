{"ast":null,"code":"try {\n  var work = require('webworkify');\n} catch (ReferenceError) {\n  // webworkify raises ReferenceError when required inside webpack\n  var work = require('webworkify-webpack');\n}\n\nvar workerSocketImpl = require('./workerSocketImpl');\n\nfunction WorkerSocket(uri) {\n  this.socket_ = work(workerSocketImpl);\n  this.socket_.addEventListener('message', this.handleWorkerMessage_.bind(this));\n  this.socket_.postMessage({\n    uri: uri\n  });\n}\n\nWorkerSocket.prototype.handleWorkerMessage_ = function (ev) {\n  var data = ev.data;\n\n  if (data instanceof ArrayBuffer || typeof data === 'string') {\n    // binary or JSON message from rosbridge\n    this.onmessage(ev);\n  } else {\n    // control message from the wrapped WebSocket\n    var type = data.type;\n\n    if (type === 'close') {\n      this.onclose(null);\n    } else if (type === 'open') {\n      this.onopen(null);\n    } else if (type === 'error') {\n      this.onerror(null);\n    } else {\n      throw 'Unknown message from workersocket';\n    }\n  }\n};\n\nWorkerSocket.prototype.send = function (data) {\n  this.socket_.postMessage(data);\n};\n\nWorkerSocket.prototype.close = function () {\n  this.socket_.postMessage({\n    close: true\n  });\n};\n\nmodule.exports = WorkerSocket;","map":{"version":3,"names":["work","require","ReferenceError","workerSocketImpl","WorkerSocket","uri","socket_","addEventListener","handleWorkerMessage_","bind","postMessage","prototype","ev","data","ArrayBuffer","onmessage","type","onclose","onopen","onerror","send","close","module","exports"],"sources":["/home/daeho/Documents/react/study/node_modules/roslib/src/util/workerSocket.js"],"sourcesContent":["try {\n    var work = require('webworkify');\n} catch(ReferenceError) {\n    // webworkify raises ReferenceError when required inside webpack\n    var work = require('webworkify-webpack');\n}\nvar workerSocketImpl = require('./workerSocketImpl');\n\nfunction WorkerSocket(uri) {\n  this.socket_ = work(workerSocketImpl);\n\n  this.socket_.addEventListener('message', this.handleWorkerMessage_.bind(this));\n\n  this.socket_.postMessage({\n    uri: uri,\n  });\n}\n\nWorkerSocket.prototype.handleWorkerMessage_ = function(ev) {\n  var data = ev.data;\n  if (data instanceof ArrayBuffer || typeof data === 'string') {\n    // binary or JSON message from rosbridge\n    this.onmessage(ev);\n  } else {\n    // control message from the wrapped WebSocket\n    var type = data.type;\n    if (type === 'close') {\n      this.onclose(null);\n    } else if (type === 'open') {\n      this.onopen(null);\n    } else if (type === 'error') {\n      this.onerror(null);\n    } else {\n      throw 'Unknown message from workersocket';\n    }\n  }\n};\n\nWorkerSocket.prototype.send = function(data) {\n  this.socket_.postMessage(data);\n};\n\nWorkerSocket.prototype.close = function() {\n  this.socket_.postMessage({\n    close: true\n  });\n};\n\nmodule.exports = WorkerSocket;\n"],"mappings":"AAAA,IAAI;EACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAAlB;AACH,CAFD,CAEE,OAAMC,cAAN,EAAsB;EACpB;EACA,IAAIF,IAAI,GAAGC,OAAO,CAAC,oBAAD,CAAlB;AACH;;AACD,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAA9B;;AAEA,SAASG,YAAT,CAAsBC,GAAtB,EAA2B;EACzB,KAAKC,OAAL,GAAeN,IAAI,CAACG,gBAAD,CAAnB;EAEA,KAAKG,OAAL,CAAaC,gBAAb,CAA8B,SAA9B,EAAyC,KAAKC,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAAzC;EAEA,KAAKH,OAAL,CAAaI,WAAb,CAAyB;IACvBL,GAAG,EAAEA;EADkB,CAAzB;AAGD;;AAEDD,YAAY,CAACO,SAAb,CAAuBH,oBAAvB,GAA8C,UAASI,EAAT,EAAa;EACzD,IAAIC,IAAI,GAAGD,EAAE,CAACC,IAAd;;EACA,IAAIA,IAAI,YAAYC,WAAhB,IAA+B,OAAOD,IAAP,KAAgB,QAAnD,EAA6D;IAC3D;IACA,KAAKE,SAAL,CAAeH,EAAf;EACD,CAHD,MAGO;IACL;IACA,IAAII,IAAI,GAAGH,IAAI,CAACG,IAAhB;;IACA,IAAIA,IAAI,KAAK,OAAb,EAAsB;MACpB,KAAKC,OAAL,CAAa,IAAb;IACD,CAFD,MAEO,IAAID,IAAI,KAAK,MAAb,EAAqB;MAC1B,KAAKE,MAAL,CAAY,IAAZ;IACD,CAFM,MAEA,IAAIF,IAAI,KAAK,OAAb,EAAsB;MAC3B,KAAKG,OAAL,CAAa,IAAb;IACD,CAFM,MAEA;MACL,MAAM,mCAAN;IACD;EACF;AACF,CAlBD;;AAoBAf,YAAY,CAACO,SAAb,CAAuBS,IAAvB,GAA8B,UAASP,IAAT,EAAe;EAC3C,KAAKP,OAAL,CAAaI,WAAb,CAAyBG,IAAzB;AACD,CAFD;;AAIAT,YAAY,CAACO,SAAb,CAAuBU,KAAvB,GAA+B,YAAW;EACxC,KAAKf,OAAL,CAAaI,WAAb,CAAyB;IACvBW,KAAK,EAAE;EADgB,CAAzB;AAGD,CAJD;;AAMAC,MAAM,CAACC,OAAP,GAAiBnB,YAAjB"},"metadata":{},"sourceType":"script"}