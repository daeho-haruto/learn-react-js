{"ast":null,"code":"/**\n * @fileOverview\n * @author Laura Lindzey - lindzey@gmail.com\n */\nvar Topic = require('../core/Topic');\n\nvar Message = require('../core/Message');\n\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n/**\n * An actionlib action server client.\n *\n * Emits the following events:\n *  * 'goal' - goal sent by action client\n *  * 'cancel' - action client has canceled the request\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName - the action server name, like /fibonacci\n *   * actionName - the action message name, like 'actionlib_tutorials/FibonacciAction'\n */\n\n\nfunction SimpleActionServer(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName; // create and advertise publishers\n\n  this.feedbackPublisher = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/feedback',\n    messageType: this.actionName + 'Feedback'\n  });\n  this.feedbackPublisher.advertise();\n  var statusPublisher = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/status',\n    messageType: 'actionlib_msgs/GoalStatusArray'\n  });\n  statusPublisher.advertise();\n  this.resultPublisher = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/result',\n    messageType: this.actionName + 'Result'\n  });\n  this.resultPublisher.advertise(); // create and subscribe to listeners\n\n  var goalListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/goal',\n    messageType: this.actionName + 'Goal'\n  });\n  var cancelListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/cancel',\n    messageType: 'actionlib_msgs/GoalID'\n  }); // Track the goals and their status in order to publish status...\n\n  this.statusMessage = new Message({\n    header: {\n      stamp: {\n        secs: 0,\n        nsecs: 100\n      },\n      frame_id: ''\n    },\n    status_list: []\n  }); // needed for handling preemption prompted by a new goal being received\n\n  this.currentGoal = null; // currently tracked goal\n\n  this.nextGoal = null; // the one that'll be preempting\n\n  goalListener.subscribe(function (goalMessage) {\n    if (that.currentGoal) {\n      that.nextGoal = goalMessage; // needs to happen AFTER rest is set up\n\n      that.emit('cancel');\n    } else {\n      that.statusMessage.status_list = [{\n        goal_id: goalMessage.goal_id,\n        status: 1\n      }];\n      that.currentGoal = goalMessage;\n      that.emit('goal', goalMessage.goal);\n    }\n  }); // helper function for determing ordering of timestamps\n  // returns t1 < t2\n\n  var isEarlier = function (t1, t2) {\n    if (t1.secs > t2.secs) {\n      return false;\n    } else if (t1.secs < t2.secs) {\n      return true;\n    } else if (t1.nsecs < t2.nsecs) {\n      return true;\n    } else {\n      return false;\n    }\n  }; // TODO: this may be more complicated than necessary, since I'm\n  // not sure if the callbacks can ever wind up with a scenario\n  // where we've been preempted by a next goal, it hasn't finished\n  // processing, and then we get a cancel message\n\n\n  cancelListener.subscribe(function (cancelMessage) {\n    // cancel ALL goals if both empty\n    if (cancelMessage.stamp.secs === 0 && cancelMessage.stamp.secs === 0 && cancelMessage.id === '') {\n      that.nextGoal = null;\n\n      if (that.currentGoal) {\n        that.emit('cancel');\n      }\n    } else {\n      // treat id and stamp independently\n      if (that.currentGoal && cancelMessage.id === that.currentGoal.goal_id.id) {\n        that.emit('cancel');\n      } else if (that.nextGoal && cancelMessage.id === that.nextGoal.goal_id.id) {\n        that.nextGoal = null;\n      }\n\n      if (that.nextGoal && isEarlier(that.nextGoal.goal_id.stamp, cancelMessage.stamp)) {\n        that.nextGoal = null;\n      }\n\n      if (that.currentGoal && isEarlier(that.currentGoal.goal_id.stamp, cancelMessage.stamp)) {\n        that.emit('cancel');\n      }\n    }\n  }); // publish status at pseudo-fixed rate; required for clients to know they've connected\n\n  var statusInterval = setInterval(function () {\n    var currentTime = new Date();\n    var secs = Math.floor(currentTime.getTime() / 1000);\n    var nsecs = Math.round(1000000000 * (currentTime.getTime() / 1000 - secs));\n    that.statusMessage.header.stamp.secs = secs;\n    that.statusMessage.header.stamp.nsecs = nsecs;\n    statusPublisher.publish(that.statusMessage);\n  }, 500); // publish every 500ms\n}\n\nSimpleActionServer.prototype.__proto__ = EventEmitter2.prototype;\n/**\n*  Set action state to succeeded and return to client\n*/\n\nSimpleActionServer.prototype.setSucceeded = function (result2) {\n  var resultMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 3\n    },\n    result: result2\n  });\n  this.resultPublisher.publish(resultMessage);\n  this.statusMessage.status_list = [];\n\n  if (this.nextGoal) {\n    this.currentGoal = this.nextGoal;\n    this.nextGoal = null;\n    this.emit('goal', this.currentGoal.goal);\n  } else {\n    this.currentGoal = null;\n  }\n};\n/**\n*  Set action state to aborted and return to client\n*/\n\n\nSimpleActionServer.prototype.setAborted = function (result2) {\n  var resultMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 4\n    },\n    result: result2\n  });\n  this.resultPublisher.publish(resultMessage);\n  this.statusMessage.status_list = [];\n\n  if (this.nextGoal) {\n    this.currentGoal = this.nextGoal;\n    this.nextGoal = null;\n    this.emit('goal', this.currentGoal.goal);\n  } else {\n    this.currentGoal = null;\n  }\n};\n/**\n*  Function to send feedback\n*/\n\n\nSimpleActionServer.prototype.sendFeedback = function (feedback2) {\n  var feedbackMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 1\n    },\n    feedback: feedback2\n  });\n  this.feedbackPublisher.publish(feedbackMessage);\n};\n/**\n*  Handle case where client requests preemption\n*/\n\n\nSimpleActionServer.prototype.setPreempted = function () {\n  this.statusMessage.status_list = [];\n  var resultMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 2\n    }\n  });\n  this.resultPublisher.publish(resultMessage);\n\n  if (this.nextGoal) {\n    this.currentGoal = this.nextGoal;\n    this.nextGoal = null;\n    this.emit('goal', this.currentGoal.goal);\n  } else {\n    this.currentGoal = null;\n  }\n};\n\nmodule.exports = SimpleActionServer;","map":{"version":3,"names":["Topic","require","Message","EventEmitter2","SimpleActionServer","options","that","ros","serverName","actionName","feedbackPublisher","name","messageType","advertise","statusPublisher","resultPublisher","goalListener","cancelListener","statusMessage","header","stamp","secs","nsecs","frame_id","status_list","currentGoal","nextGoal","subscribe","goalMessage","emit","goal_id","status","goal","isEarlier","t1","t2","cancelMessage","id","statusInterval","setInterval","currentTime","Date","Math","floor","getTime","round","publish","prototype","__proto__","setSucceeded","result2","resultMessage","result","setAborted","sendFeedback","feedback2","feedbackMessage","feedback","setPreempted","module","exports"],"sources":["/home/daeho/Documents/react/study/node_modules/roslib/src/actionlib/SimpleActionServer.js"],"sourcesContent":["/**\n * @fileOverview\n * @author Laura Lindzey - lindzey@gmail.com\n */\n\nvar Topic = require('../core/Topic');\nvar Message = require('../core/Message');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * An actionlib action server client.\n *\n * Emits the following events:\n *  * 'goal' - goal sent by action client\n *  * 'cancel' - action client has canceled the request\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName - the action server name, like /fibonacci\n *   * actionName - the action message name, like 'actionlib_tutorials/FibonacciAction'\n */\n\nfunction SimpleActionServer(options) {\n    var that = this;\n    options = options || {};\n    this.ros = options.ros;\n    this.serverName = options.serverName;\n    this.actionName = options.actionName;\n\n    // create and advertise publishers\n    this.feedbackPublisher = new Topic({\n        ros : this.ros,\n        name : this.serverName + '/feedback',\n        messageType : this.actionName + 'Feedback'\n    });\n    this.feedbackPublisher.advertise();\n\n    var statusPublisher = new Topic({\n        ros : this.ros,\n        name : this.serverName + '/status',\n        messageType : 'actionlib_msgs/GoalStatusArray'\n    });\n    statusPublisher.advertise();\n\n    this.resultPublisher = new Topic({\n        ros : this.ros,\n        name : this.serverName + '/result',\n        messageType : this.actionName + 'Result'\n    });\n    this.resultPublisher.advertise();\n\n    // create and subscribe to listeners\n    var goalListener = new Topic({\n        ros : this.ros,\n        name : this.serverName + '/goal',\n        messageType : this.actionName + 'Goal'\n    });\n\n    var cancelListener = new Topic({\n        ros : this.ros,\n        name : this.serverName + '/cancel',\n        messageType : 'actionlib_msgs/GoalID'\n    });\n\n    // Track the goals and their status in order to publish status...\n    this.statusMessage = new Message({\n        header : {\n            stamp : {secs : 0, nsecs : 100},\n            frame_id : ''\n        },\n        status_list : []\n    });\n\n    // needed for handling preemption prompted by a new goal being received\n    this.currentGoal = null; // currently tracked goal\n    this.nextGoal = null; // the one that'll be preempting\n\n    goalListener.subscribe(function(goalMessage) {\n        \n    if(that.currentGoal) {\n            that.nextGoal = goalMessage;\n            // needs to happen AFTER rest is set up\n            that.emit('cancel');\n    } else {\n            that.statusMessage.status_list = [{goal_id : goalMessage.goal_id, status : 1}];\n            that.currentGoal = goalMessage;\n            that.emit('goal', goalMessage.goal);\n    }\n    });\n\n    // helper function for determing ordering of timestamps\n    // returns t1 < t2\n    var isEarlier = function(t1, t2) {\n        if(t1.secs > t2.secs) {\n            return false;\n        } else if(t1.secs < t2.secs) {\n            return true;\n        } else if(t1.nsecs < t2.nsecs) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    // TODO: this may be more complicated than necessary, since I'm\n    // not sure if the callbacks can ever wind up with a scenario\n    // where we've been preempted by a next goal, it hasn't finished\n    // processing, and then we get a cancel message\n    cancelListener.subscribe(function(cancelMessage) {\n\n        // cancel ALL goals if both empty\n        if(cancelMessage.stamp.secs === 0 && cancelMessage.stamp.secs === 0 && cancelMessage.id === '') {\n            that.nextGoal = null;\n            if(that.currentGoal) {\n                that.emit('cancel');\n            }\n        } else { // treat id and stamp independently\n            if(that.currentGoal && cancelMessage.id === that.currentGoal.goal_id.id) {\n                that.emit('cancel');\n            } else if(that.nextGoal && cancelMessage.id === that.nextGoal.goal_id.id) {\n                that.nextGoal = null;\n            }\n\n            if(that.nextGoal && isEarlier(that.nextGoal.goal_id.stamp,\n                                          cancelMessage.stamp)) {\n                that.nextGoal = null;\n            }\n            if(that.currentGoal && isEarlier(that.currentGoal.goal_id.stamp,\n                                             cancelMessage.stamp)) {\n                \n                that.emit('cancel');\n            }\n        }\n    });\n\n    // publish status at pseudo-fixed rate; required for clients to know they've connected\n    var statusInterval = setInterval( function() {\n        var currentTime = new Date();\n        var secs = Math.floor(currentTime.getTime()/1000);\n        var nsecs = Math.round(1000000000*(currentTime.getTime()/1000-secs));\n        that.statusMessage.header.stamp.secs = secs;\n        that.statusMessage.header.stamp.nsecs = nsecs;\n        statusPublisher.publish(that.statusMessage);\n    }, 500); // publish every 500ms\n\n}\n\nSimpleActionServer.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n*  Set action state to succeeded and return to client\n*/\n\nSimpleActionServer.prototype.setSucceeded = function(result2) {\n    \n\n    var resultMessage = new Message({\n        status : {goal_id : this.currentGoal.goal_id, status : 3},\n        result : result2\n    });\n    this.resultPublisher.publish(resultMessage);\n\n    this.statusMessage.status_list = [];\n    if(this.nextGoal) {\n        this.currentGoal = this.nextGoal;\n        this.nextGoal = null;\n        this.emit('goal', this.currentGoal.goal);\n    } else {\n        this.currentGoal = null;\n    }\n};\n\n/**\n*  Set action state to aborted and return to client\n*/\n\nSimpleActionServer.prototype.setAborted = function(result2) {\n    var resultMessage = new Message({\n        status : {goal_id : this.currentGoal.goal_id, status : 4},\n        result : result2\n    });\n    this.resultPublisher.publish(resultMessage);\n\n    this.statusMessage.status_list = [];\n    if(this.nextGoal) {\n        this.currentGoal = this.nextGoal;\n        this.nextGoal = null;\n        this.emit('goal', this.currentGoal.goal);\n    } else {\n        this.currentGoal = null;\n    }\n};\n\n/**\n*  Function to send feedback\n*/\n\nSimpleActionServer.prototype.sendFeedback = function(feedback2) {\n\n    var feedbackMessage = new Message({\n        status : {goal_id : this.currentGoal.goal_id, status : 1},\n        feedback : feedback2\n    });\n    this.feedbackPublisher.publish(feedbackMessage);\n};\n\n/**\n*  Handle case where client requests preemption\n*/\n\nSimpleActionServer.prototype.setPreempted = function() {\n\n    this.statusMessage.status_list = [];\n    var resultMessage = new Message({\n        status : {goal_id : this.currentGoal.goal_id, status : 2},\n    });\n    this.resultPublisher.publish(resultMessage);\n\n    if(this.nextGoal) {\n        this.currentGoal = this.nextGoal;\n        this.nextGoal = null;\n        this.emit('goal', this.currentGoal.goal);\n    } else {\n        this.currentGoal = null;\n    }\n};\n\nmodule.exports = SimpleActionServer;"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAAnB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,eAAD,CAAP,CAAyBE,aAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;EACjC,IAAIC,IAAI,GAAG,IAAX;EACAD,OAAO,GAAGA,OAAO,IAAI,EAArB;EACA,KAAKE,GAAL,GAAWF,OAAO,CAACE,GAAnB;EACA,KAAKC,UAAL,GAAkBH,OAAO,CAACG,UAA1B;EACA,KAAKC,UAAL,GAAkBJ,OAAO,CAACI,UAA1B,CALiC,CAOjC;;EACA,KAAKC,iBAAL,GAAyB,IAAIV,KAAJ,CAAU;IAC/BO,GAAG,EAAG,KAAKA,GADoB;IAE/BI,IAAI,EAAG,KAAKH,UAAL,GAAkB,WAFM;IAG/BI,WAAW,EAAG,KAAKH,UAAL,GAAkB;EAHD,CAAV,CAAzB;EAKA,KAAKC,iBAAL,CAAuBG,SAAvB;EAEA,IAAIC,eAAe,GAAG,IAAId,KAAJ,CAAU;IAC5BO,GAAG,EAAG,KAAKA,GADiB;IAE5BI,IAAI,EAAG,KAAKH,UAAL,GAAkB,SAFG;IAG5BI,WAAW,EAAG;EAHc,CAAV,CAAtB;EAKAE,eAAe,CAACD,SAAhB;EAEA,KAAKE,eAAL,GAAuB,IAAIf,KAAJ,CAAU;IAC7BO,GAAG,EAAG,KAAKA,GADkB;IAE7BI,IAAI,EAAG,KAAKH,UAAL,GAAkB,SAFI;IAG7BI,WAAW,EAAG,KAAKH,UAAL,GAAkB;EAHH,CAAV,CAAvB;EAKA,KAAKM,eAAL,CAAqBF,SAArB,GA3BiC,CA6BjC;;EACA,IAAIG,YAAY,GAAG,IAAIhB,KAAJ,CAAU;IACzBO,GAAG,EAAG,KAAKA,GADc;IAEzBI,IAAI,EAAG,KAAKH,UAAL,GAAkB,OAFA;IAGzBI,WAAW,EAAG,KAAKH,UAAL,GAAkB;EAHP,CAAV,CAAnB;EAMA,IAAIQ,cAAc,GAAG,IAAIjB,KAAJ,CAAU;IAC3BO,GAAG,EAAG,KAAKA,GADgB;IAE3BI,IAAI,EAAG,KAAKH,UAAL,GAAkB,SAFE;IAG3BI,WAAW,EAAG;EAHa,CAAV,CAArB,CApCiC,CA0CjC;;EACA,KAAKM,aAAL,GAAqB,IAAIhB,OAAJ,CAAY;IAC7BiB,MAAM,EAAG;MACLC,KAAK,EAAG;QAACC,IAAI,EAAG,CAAR;QAAWC,KAAK,EAAG;MAAnB,CADH;MAELC,QAAQ,EAAG;IAFN,CADoB;IAK7BC,WAAW,EAAG;EALe,CAAZ,CAArB,CA3CiC,CAmDjC;;EACA,KAAKC,WAAL,GAAmB,IAAnB,CApDiC,CAoDR;;EACzB,KAAKC,QAAL,GAAgB,IAAhB,CArDiC,CAqDX;;EAEtBV,YAAY,CAACW,SAAb,CAAuB,UAASC,WAAT,EAAsB;IAE7C,IAAGtB,IAAI,CAACmB,WAAR,EAAqB;MACbnB,IAAI,CAACoB,QAAL,GAAgBE,WAAhB,CADa,CAEb;;MACAtB,IAAI,CAACuB,IAAL,CAAU,QAAV;IACP,CAJD,MAIO;MACCvB,IAAI,CAACY,aAAL,CAAmBM,WAAnB,GAAiC,CAAC;QAACM,OAAO,EAAGF,WAAW,CAACE,OAAvB;QAAgCC,MAAM,EAAG;MAAzC,CAAD,CAAjC;MACAzB,IAAI,CAACmB,WAAL,GAAmBG,WAAnB;MACAtB,IAAI,CAACuB,IAAL,CAAU,MAAV,EAAkBD,WAAW,CAACI,IAA9B;IACP;EACA,CAXD,EAvDiC,CAoEjC;EACA;;EACA,IAAIC,SAAS,GAAG,UAASC,EAAT,EAAaC,EAAb,EAAiB;IAC7B,IAAGD,EAAE,CAACb,IAAH,GAAUc,EAAE,CAACd,IAAhB,EAAsB;MAClB,OAAO,KAAP;IACH,CAFD,MAEO,IAAGa,EAAE,CAACb,IAAH,GAAUc,EAAE,CAACd,IAAhB,EAAsB;MACzB,OAAO,IAAP;IACH,CAFM,MAEA,IAAGa,EAAE,CAACZ,KAAH,GAAWa,EAAE,CAACb,KAAjB,EAAwB;MAC3B,OAAO,IAAP;IACH,CAFM,MAEA;MACH,OAAO,KAAP;IACH;EACJ,CAVD,CAtEiC,CAkFjC;EACA;EACA;EACA;;;EACAL,cAAc,CAACU,SAAf,CAAyB,UAASS,aAAT,EAAwB;IAE7C;IACA,IAAGA,aAAa,CAAChB,KAAd,CAAoBC,IAApB,KAA6B,CAA7B,IAAkCe,aAAa,CAAChB,KAAd,CAAoBC,IAApB,KAA6B,CAA/D,IAAoEe,aAAa,CAACC,EAAd,KAAqB,EAA5F,EAAgG;MAC5F/B,IAAI,CAACoB,QAAL,GAAgB,IAAhB;;MACA,IAAGpB,IAAI,CAACmB,WAAR,EAAqB;QACjBnB,IAAI,CAACuB,IAAL,CAAU,QAAV;MACH;IACJ,CALD,MAKO;MAAE;MACL,IAAGvB,IAAI,CAACmB,WAAL,IAAoBW,aAAa,CAACC,EAAd,KAAqB/B,IAAI,CAACmB,WAAL,CAAiBK,OAAjB,CAAyBO,EAArE,EAAyE;QACrE/B,IAAI,CAACuB,IAAL,CAAU,QAAV;MACH,CAFD,MAEO,IAAGvB,IAAI,CAACoB,QAAL,IAAiBU,aAAa,CAACC,EAAd,KAAqB/B,IAAI,CAACoB,QAAL,CAAcI,OAAd,CAAsBO,EAA/D,EAAmE;QACtE/B,IAAI,CAACoB,QAAL,GAAgB,IAAhB;MACH;;MAED,IAAGpB,IAAI,CAACoB,QAAL,IAAiBO,SAAS,CAAC3B,IAAI,CAACoB,QAAL,CAAcI,OAAd,CAAsBV,KAAvB,EACCgB,aAAa,CAAChB,KADf,CAA7B,EACoD;QAChDd,IAAI,CAACoB,QAAL,GAAgB,IAAhB;MACH;;MACD,IAAGpB,IAAI,CAACmB,WAAL,IAAoBQ,SAAS,CAAC3B,IAAI,CAACmB,WAAL,CAAiBK,OAAjB,CAAyBV,KAA1B,EACCgB,aAAa,CAAChB,KADf,CAAhC,EACuD;QAEnDd,IAAI,CAACuB,IAAL,CAAU,QAAV;MACH;IACJ;EACJ,CAzBD,EAtFiC,CAiHjC;;EACA,IAAIS,cAAc,GAAGC,WAAW,CAAE,YAAW;IACzC,IAAIC,WAAW,GAAG,IAAIC,IAAJ,EAAlB;IACA,IAAIpB,IAAI,GAAGqB,IAAI,CAACC,KAAL,CAAWH,WAAW,CAACI,OAAZ,KAAsB,IAAjC,CAAX;IACA,IAAItB,KAAK,GAAGoB,IAAI,CAACG,KAAL,CAAW,cAAYL,WAAW,CAACI,OAAZ,KAAsB,IAAtB,GAA2BvB,IAAvC,CAAX,CAAZ;IACAf,IAAI,CAACY,aAAL,CAAmBC,MAAnB,CAA0BC,KAA1B,CAAgCC,IAAhC,GAAuCA,IAAvC;IACAf,IAAI,CAACY,aAAL,CAAmBC,MAAnB,CAA0BC,KAA1B,CAAgCE,KAAhC,GAAwCA,KAAxC;IACAR,eAAe,CAACgC,OAAhB,CAAwBxC,IAAI,CAACY,aAA7B;EACH,CAP+B,EAO7B,GAP6B,CAAhC,CAlHiC,CAyHxB;AAEZ;;AAEDd,kBAAkB,CAAC2C,SAAnB,CAA6BC,SAA7B,GAAyC7C,aAAa,CAAC4C,SAAvD;AAEA;AACA;AACA;;AAEA3C,kBAAkB,CAAC2C,SAAnB,CAA6BE,YAA7B,GAA4C,UAASC,OAAT,EAAkB;EAG1D,IAAIC,aAAa,GAAG,IAAIjD,OAAJ,CAAY;IAC5B6B,MAAM,EAAG;MAACD,OAAO,EAAG,KAAKL,WAAL,CAAiBK,OAA5B;MAAqCC,MAAM,EAAG;IAA9C,CADmB;IAE5BqB,MAAM,EAAGF;EAFmB,CAAZ,CAApB;EAIA,KAAKnC,eAAL,CAAqB+B,OAArB,CAA6BK,aAA7B;EAEA,KAAKjC,aAAL,CAAmBM,WAAnB,GAAiC,EAAjC;;EACA,IAAG,KAAKE,QAAR,EAAkB;IACd,KAAKD,WAAL,GAAmB,KAAKC,QAAxB;IACA,KAAKA,QAAL,GAAgB,IAAhB;IACA,KAAKG,IAAL,CAAU,MAAV,EAAkB,KAAKJ,WAAL,CAAiBO,IAAnC;EACH,CAJD,MAIO;IACH,KAAKP,WAAL,GAAmB,IAAnB;EACH;AACJ,CAjBD;AAmBA;AACA;AACA;;;AAEArB,kBAAkB,CAAC2C,SAAnB,CAA6BM,UAA7B,GAA0C,UAASH,OAAT,EAAkB;EACxD,IAAIC,aAAa,GAAG,IAAIjD,OAAJ,CAAY;IAC5B6B,MAAM,EAAG;MAACD,OAAO,EAAG,KAAKL,WAAL,CAAiBK,OAA5B;MAAqCC,MAAM,EAAG;IAA9C,CADmB;IAE5BqB,MAAM,EAAGF;EAFmB,CAAZ,CAApB;EAIA,KAAKnC,eAAL,CAAqB+B,OAArB,CAA6BK,aAA7B;EAEA,KAAKjC,aAAL,CAAmBM,WAAnB,GAAiC,EAAjC;;EACA,IAAG,KAAKE,QAAR,EAAkB;IACd,KAAKD,WAAL,GAAmB,KAAKC,QAAxB;IACA,KAAKA,QAAL,GAAgB,IAAhB;IACA,KAAKG,IAAL,CAAU,MAAV,EAAkB,KAAKJ,WAAL,CAAiBO,IAAnC;EACH,CAJD,MAIO;IACH,KAAKP,WAAL,GAAmB,IAAnB;EACH;AACJ,CAfD;AAiBA;AACA;AACA;;;AAEArB,kBAAkB,CAAC2C,SAAnB,CAA6BO,YAA7B,GAA4C,UAASC,SAAT,EAAoB;EAE5D,IAAIC,eAAe,GAAG,IAAItD,OAAJ,CAAY;IAC9B6B,MAAM,EAAG;MAACD,OAAO,EAAG,KAAKL,WAAL,CAAiBK,OAA5B;MAAqCC,MAAM,EAAG;IAA9C,CADqB;IAE9B0B,QAAQ,EAAGF;EAFmB,CAAZ,CAAtB;EAIA,KAAK7C,iBAAL,CAAuBoC,OAAvB,CAA+BU,eAA/B;AACH,CAPD;AASA;AACA;AACA;;;AAEApD,kBAAkB,CAAC2C,SAAnB,CAA6BW,YAA7B,GAA4C,YAAW;EAEnD,KAAKxC,aAAL,CAAmBM,WAAnB,GAAiC,EAAjC;EACA,IAAI2B,aAAa,GAAG,IAAIjD,OAAJ,CAAY;IAC5B6B,MAAM,EAAG;MAACD,OAAO,EAAG,KAAKL,WAAL,CAAiBK,OAA5B;MAAqCC,MAAM,EAAG;IAA9C;EADmB,CAAZ,CAApB;EAGA,KAAKhB,eAAL,CAAqB+B,OAArB,CAA6BK,aAA7B;;EAEA,IAAG,KAAKzB,QAAR,EAAkB;IACd,KAAKD,WAAL,GAAmB,KAAKC,QAAxB;IACA,KAAKA,QAAL,GAAgB,IAAhB;IACA,KAAKG,IAAL,CAAU,MAAV,EAAkB,KAAKJ,WAAL,CAAiBO,IAAnC;EACH,CAJD,MAIO;IACH,KAAKP,WAAL,GAAmB,IAAnB;EACH;AACJ,CAfD;;AAiBAkC,MAAM,CAACC,OAAP,GAAiBxD,kBAAjB"},"metadata":{},"sourceType":"script"}