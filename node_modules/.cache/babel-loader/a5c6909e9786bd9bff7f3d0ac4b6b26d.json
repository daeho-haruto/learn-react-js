{"ast":null,"code":"/**\n * @fileOverview \n * @author Benjamin Pitzer - ben.pitzer@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\nvar Pose = require('../math/Pose');\n\nvar Vector3 = require('../math/Vector3');\n\nvar Quaternion = require('../math/Quaternion');\n\nvar UrdfCylinder = require('./UrdfCylinder');\n\nvar UrdfBox = require('./UrdfBox');\n\nvar UrdfMaterial = require('./UrdfMaterial');\n\nvar UrdfMesh = require('./UrdfMesh');\n\nvar UrdfSphere = require('./UrdfSphere');\n/**\n * A Visual element in a URDF.\n *\n * @constructor\n * @param options - object with following keys:\n *  * xml - the XML element to parse\n */\n\n\nfunction UrdfVisual(options) {\n  var xml = options.xml;\n  this.origin = null;\n  this.geometry = null;\n  this.material = null;\n  this.name = options.xml.getAttribute('name'); // Origin\n\n  var origins = xml.getElementsByTagName('origin');\n\n  if (origins.length === 0) {\n    // use the identity as the default\n    this.origin = new Pose();\n  } else {\n    // Check the XYZ\n    var xyz = origins[0].getAttribute('xyz');\n    var position = new Vector3();\n\n    if (xyz) {\n      xyz = xyz.split(' ');\n      position = new Vector3({\n        x: parseFloat(xyz[0]),\n        y: parseFloat(xyz[1]),\n        z: parseFloat(xyz[2])\n      });\n    } // Check the RPY\n\n\n    var rpy = origins[0].getAttribute('rpy');\n    var orientation = new Quaternion();\n\n    if (rpy) {\n      rpy = rpy.split(' '); // Convert from RPY\n\n      var roll = parseFloat(rpy[0]);\n      var pitch = parseFloat(rpy[1]);\n      var yaw = parseFloat(rpy[2]);\n      var phi = roll / 2.0;\n      var the = pitch / 2.0;\n      var psi = yaw / 2.0;\n      var x = Math.sin(phi) * Math.cos(the) * Math.cos(psi) - Math.cos(phi) * Math.sin(the) * Math.sin(psi);\n      var y = Math.cos(phi) * Math.sin(the) * Math.cos(psi) + Math.sin(phi) * Math.cos(the) * Math.sin(psi);\n      var z = Math.cos(phi) * Math.cos(the) * Math.sin(psi) - Math.sin(phi) * Math.sin(the) * Math.cos(psi);\n      var w = Math.cos(phi) * Math.cos(the) * Math.cos(psi) + Math.sin(phi) * Math.sin(the) * Math.sin(psi);\n      orientation = new Quaternion({\n        x: x,\n        y: y,\n        z: z,\n        w: w\n      });\n      orientation.normalize();\n    }\n\n    this.origin = new Pose({\n      position: position,\n      orientation: orientation\n    });\n  } // Geometry\n\n\n  var geoms = xml.getElementsByTagName('geometry');\n\n  if (geoms.length > 0) {\n    var geom = geoms[0];\n    var shape = null; // Check for the shape\n\n    for (var i = 0; i < geom.childNodes.length; i++) {\n      var node = geom.childNodes[i];\n\n      if (node.nodeType === 1) {\n        shape = node;\n        break;\n      }\n    } // Check the type\n\n\n    var type = shape.nodeName;\n\n    if (type === 'sphere') {\n      this.geometry = new UrdfSphere({\n        xml: shape\n      });\n    } else if (type === 'box') {\n      this.geometry = new UrdfBox({\n        xml: shape\n      });\n    } else if (type === 'cylinder') {\n      this.geometry = new UrdfCylinder({\n        xml: shape\n      });\n    } else if (type === 'mesh') {\n      this.geometry = new UrdfMesh({\n        xml: shape\n      });\n    } else {\n      console.warn('Unknown geometry type ' + type);\n    }\n  } // Material\n\n\n  var materials = xml.getElementsByTagName('material');\n\n  if (materials.length > 0) {\n    this.material = new UrdfMaterial({\n      xml: materials[0]\n    });\n  }\n}\n\nmodule.exports = UrdfVisual;","map":{"version":3,"names":["Pose","require","Vector3","Quaternion","UrdfCylinder","UrdfBox","UrdfMaterial","UrdfMesh","UrdfSphere","UrdfVisual","options","xml","origin","geometry","material","name","getAttribute","origins","getElementsByTagName","length","xyz","position","split","x","parseFloat","y","z","rpy","orientation","roll","pitch","yaw","phi","the","psi","Math","sin","cos","w","normalize","geoms","geom","shape","i","childNodes","node","nodeType","type","nodeName","console","warn","materials","module","exports"],"sources":["/home/daeho/Documents/react/study/node_modules/roslib/src/urdf/UrdfVisual.js"],"sourcesContent":["/**\n * @fileOverview \n * @author Benjamin Pitzer - ben.pitzer@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Pose = require('../math/Pose');\nvar Vector3 = require('../math/Vector3');\nvar Quaternion = require('../math/Quaternion');\n\nvar UrdfCylinder = require('./UrdfCylinder');\nvar UrdfBox = require('./UrdfBox');\nvar UrdfMaterial = require('./UrdfMaterial');\nvar UrdfMesh = require('./UrdfMesh');\nvar UrdfSphere = require('./UrdfSphere');\n\n/**\n * A Visual element in a URDF.\n *\n * @constructor\n * @param options - object with following keys:\n *  * xml - the XML element to parse\n */\nfunction UrdfVisual(options) {\n  var xml = options.xml;\n  this.origin = null;\n  this.geometry = null;\n  this.material = null;\n\n  this.name = options.xml.getAttribute('name');\n\n  // Origin\n  var origins = xml.getElementsByTagName('origin');\n  if (origins.length === 0) {\n    // use the identity as the default\n    this.origin = new Pose();\n  } else {\n    // Check the XYZ\n    var xyz = origins[0].getAttribute('xyz');\n    var position = new Vector3();\n    if (xyz) {\n      xyz = xyz.split(' ');\n      position = new Vector3({\n        x : parseFloat(xyz[0]),\n        y : parseFloat(xyz[1]),\n        z : parseFloat(xyz[2])\n      });\n    }\n\n    // Check the RPY\n    var rpy = origins[0].getAttribute('rpy');\n    var orientation = new Quaternion();\n    if (rpy) {\n      rpy = rpy.split(' ');\n      // Convert from RPY\n      var roll = parseFloat(rpy[0]);\n      var pitch = parseFloat(rpy[1]);\n      var yaw = parseFloat(rpy[2]);\n      var phi = roll / 2.0;\n      var the = pitch / 2.0;\n      var psi = yaw / 2.0;\n      var x = Math.sin(phi) * Math.cos(the) * Math.cos(psi) - Math.cos(phi) * Math.sin(the)\n          * Math.sin(psi);\n      var y = Math.cos(phi) * Math.sin(the) * Math.cos(psi) + Math.sin(phi) * Math.cos(the)\n          * Math.sin(psi);\n      var z = Math.cos(phi) * Math.cos(the) * Math.sin(psi) - Math.sin(phi) * Math.sin(the)\n          * Math.cos(psi);\n      var w = Math.cos(phi) * Math.cos(the) * Math.cos(psi) + Math.sin(phi) * Math.sin(the)\n          * Math.sin(psi);\n\n      orientation = new Quaternion({\n        x : x,\n        y : y,\n        z : z,\n        w : w\n      });\n      orientation.normalize();\n    }\n    this.origin = new Pose({\n      position : position,\n      orientation : orientation\n    });\n  }\n\n  // Geometry\n  var geoms = xml.getElementsByTagName('geometry');\n  if (geoms.length > 0) {\n    var geom = geoms[0];\n    var shape = null;\n    // Check for the shape\n    for (var i = 0; i < geom.childNodes.length; i++) {\n      var node = geom.childNodes[i];\n      if (node.nodeType === 1) {\n        shape = node;\n        break;\n      }\n    }\n    // Check the type\n    var type = shape.nodeName;\n    if (type === 'sphere') {\n      this.geometry = new UrdfSphere({\n        xml : shape\n      });\n    } else if (type === 'box') {\n      this.geometry = new UrdfBox({\n        xml : shape\n      });\n    } else if (type === 'cylinder') {\n      this.geometry = new UrdfCylinder({\n        xml : shape\n      });\n    } else if (type === 'mesh') {\n      this.geometry = new UrdfMesh({\n        xml : shape\n      });\n    } else {\n      console.warn('Unknown geometry type ' + type);\n    }\n  }\n\n  // Material\n  var materials = xml.getElementsByTagName('material');\n  if (materials.length > 0) {\n    this.material = new UrdfMaterial({\n      xml : materials[0]\n    });\n  }\n}\n\nmodule.exports = UrdfVisual;"],"mappings":"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"},"metadata":{},"sourceType":"script"}