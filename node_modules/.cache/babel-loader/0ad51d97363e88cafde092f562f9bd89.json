{"ast":null,"code":"/**\n * @fileoverview\n * @author David Gossow - dgossow@willowgarage.com\n */\nvar Vector3 = require('./Vector3');\n\nvar Quaternion = require('./Quaternion');\n/**\n * A Pose in 3D space. Values are copied into this object.\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * position - the Vector3 describing the position\n *   * orientation - the ROSLIB.Quaternion describing the orientation\n */\n\n\nfunction Pose(options) {\n  options = options || {}; // copy the values into this object if they exist\n\n  this.position = new Vector3(options.position);\n  this.orientation = new Quaternion(options.orientation);\n}\n/**\n * Apply a transform against this pose.\n *\n * @param tf the transform\n */\n\n\nPose.prototype.applyTransform = function (tf) {\n  this.position.multiplyQuaternion(tf.rotation);\n  this.position.add(tf.translation);\n  var tmp = tf.rotation.clone();\n  tmp.multiply(this.orientation);\n  this.orientation = tmp;\n};\n/**\n * Clone a copy of this pose.\n *\n * @returns the cloned pose\n */\n\n\nPose.prototype.clone = function () {\n  return new Pose(this);\n};\n/**\n * Multiplies this pose with another pose without altering this pose.\n *\n * @returns Result of multiplication.\n */\n\n\nPose.prototype.multiply = function (pose) {\n  var p = pose.clone();\n  p.applyTransform({\n    rotation: this.orientation,\n    translation: this.position\n  });\n  return p;\n};\n/**\n * Computes the inverse of this pose.\n *\n * @returns Inverse of pose.\n */\n\n\nPose.prototype.getInverse = function () {\n  var inverse = this.clone();\n  inverse.orientation.invert();\n  inverse.position.multiplyQuaternion(inverse.orientation);\n  inverse.position.x *= -1;\n  inverse.position.y *= -1;\n  inverse.position.z *= -1;\n  return inverse;\n};\n\nmodule.exports = Pose;","map":{"version":3,"names":["Vector3","require","Quaternion","Pose","options","position","orientation","prototype","applyTransform","tf","multiplyQuaternion","rotation","add","translation","tmp","clone","multiply","pose","p","getInverse","inverse","invert","x","y","z","module","exports"],"sources":["/home/daeho/Documents/react/study/node_modules/roslib/src/math/Pose.js"],"sourcesContent":["/**\n * @fileoverview\n * @author David Gossow - dgossow@willowgarage.com\n */\n\nvar Vector3 = require('./Vector3');\nvar Quaternion = require('./Quaternion');\n\n/**\n * A Pose in 3D space. Values are copied into this object.\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * position - the Vector3 describing the position\n *   * orientation - the ROSLIB.Quaternion describing the orientation\n */\nfunction Pose(options) {\n  options = options || {};\n  // copy the values into this object if they exist\n  this.position = new Vector3(options.position);\n  this.orientation = new Quaternion(options.orientation);\n}\n\n/**\n * Apply a transform against this pose.\n *\n * @param tf the transform\n */\nPose.prototype.applyTransform = function(tf) {\n  this.position.multiplyQuaternion(tf.rotation);\n  this.position.add(tf.translation);\n  var tmp = tf.rotation.clone();\n  tmp.multiply(this.orientation);\n  this.orientation = tmp;\n};\n\n/**\n * Clone a copy of this pose.\n *\n * @returns the cloned pose\n */\nPose.prototype.clone = function() {\n  return new Pose(this);\n};\n\n/**\n * Multiplies this pose with another pose without altering this pose.\n *\n * @returns Result of multiplication.\n */\nPose.prototype.multiply = function(pose) {\n  var p = pose.clone();\n  p.applyTransform({ rotation: this.orientation, translation: this.position });\n  return p;\n};\n\n/**\n * Computes the inverse of this pose.\n *\n * @returns Inverse of pose.\n */\nPose.prototype.getInverse = function() {\n  var inverse = this.clone();\n  inverse.orientation.invert();\n  inverse.position.multiplyQuaternion(inverse.orientation);\n  inverse.position.x *= -1;\n  inverse.position.y *= -1;\n  inverse.position.z *= -1;\n  return inverse;\n};\n\nmodule.exports = Pose;"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,IAAT,CAAcC,OAAd,EAAuB;EACrBA,OAAO,GAAGA,OAAO,IAAI,EAArB,CADqB,CAErB;;EACA,KAAKC,QAAL,GAAgB,IAAIL,OAAJ,CAAYI,OAAO,CAACC,QAApB,CAAhB;EACA,KAAKC,WAAL,GAAmB,IAAIJ,UAAJ,CAAeE,OAAO,CAACE,WAAvB,CAAnB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACAH,IAAI,CAACI,SAAL,CAAeC,cAAf,GAAgC,UAASC,EAAT,EAAa;EAC3C,KAAKJ,QAAL,CAAcK,kBAAd,CAAiCD,EAAE,CAACE,QAApC;EACA,KAAKN,QAAL,CAAcO,GAAd,CAAkBH,EAAE,CAACI,WAArB;EACA,IAAIC,GAAG,GAAGL,EAAE,CAACE,QAAH,CAAYI,KAAZ,EAAV;EACAD,GAAG,CAACE,QAAJ,CAAa,KAAKV,WAAlB;EACA,KAAKA,WAAL,GAAmBQ,GAAnB;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAX,IAAI,CAACI,SAAL,CAAeQ,KAAf,GAAuB,YAAW;EAChC,OAAO,IAAIZ,IAAJ,CAAS,IAAT,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAA,IAAI,CAACI,SAAL,CAAeS,QAAf,GAA0B,UAASC,IAAT,EAAe;EACvC,IAAIC,CAAC,GAAGD,IAAI,CAACF,KAAL,EAAR;EACAG,CAAC,CAACV,cAAF,CAAiB;IAAEG,QAAQ,EAAE,KAAKL,WAAjB;IAA8BO,WAAW,EAAE,KAAKR;EAAhD,CAAjB;EACA,OAAOa,CAAP;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AACAf,IAAI,CAACI,SAAL,CAAeY,UAAf,GAA4B,YAAW;EACrC,IAAIC,OAAO,GAAG,KAAKL,KAAL,EAAd;EACAK,OAAO,CAACd,WAAR,CAAoBe,MAApB;EACAD,OAAO,CAACf,QAAR,CAAiBK,kBAAjB,CAAoCU,OAAO,CAACd,WAA5C;EACAc,OAAO,CAACf,QAAR,CAAiBiB,CAAjB,IAAsB,CAAC,CAAvB;EACAF,OAAO,CAACf,QAAR,CAAiBkB,CAAjB,IAAsB,CAAC,CAAvB;EACAH,OAAO,CAACf,QAAR,CAAiBmB,CAAjB,IAAsB,CAAC,CAAvB;EACA,OAAOJ,OAAP;AACD,CARD;;AAUAK,MAAM,CAACC,OAAP,GAAiBvB,IAAjB"},"metadata":{},"sourceType":"script"}